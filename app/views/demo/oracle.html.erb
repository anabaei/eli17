

<img src=" <%= asset_path('funny_group.jpg') %>" >
<a href="https://www.techonthenet.com/sql_server/foreign_keys/foreign_delete.php"> SQL SERVER ADVANCED </a>

<h2> Different Usage of Databases</h2>
<li>Online Transaction Processing- OLTP. It uses for checking the data transactions </li>
<li> Online Analytical Processing. It uses for analyzing the data like Google Analytic </li>

<h2> Types of Database</h2>
<li> Relational database management system</li>
<li> Object database management system</li>
<li> Multi dimentional database management system</li>


<h2> Database Management Systems </h2>
<p> <b>Oracle,
,Microsoft SQL Server
,MySQL (Open source)
,Sybase
,Postgre SQL
,Informix
,DB2 </b></p>
<p><b> Each Database management system has two parts: </b> </p>
<li> Server components. One part is database engine to comunicatie with database to parse, retrive. Another part is job schedualer in order to find who has done what on database and another part is finding most effiecient way to retrive data </li>
<li> Client components. Tools for querying data like SQL DEVELOPER.</li>
<legend> </legend>
<h2> Subsets of SQL </h2>
<li>  Data manipulation language.  It works with data and we can rollback or undo them  SELECT, INSERT, UPDATE, and DELETE
</li>
<li>  Data defination language. It changes the structure of database and we can not rollback them  CREATE, ALTER, DROP(to remove a table) and TRUNCATE(to wipe off all data on a table)
</li>
<li>  Data control language. It changes the access to database, who is allow to see what, same as GRANT REVOKE and DENY
</li>
<li>  Transaction control language COMMIT, ROLLBACK, SAVEPOINT. Transaction is logical operation with sql. Like an account transfering from one person's account to another. It requires two steps.
 <ol>
<li> Update one account to retrieve data from it</li>
<li> Then another update to the person who wanted to tranfer money to</li>
 </ol>
<p> We can not do these two steps at once. So these two update statement (DML statement) create one transaction. Transaction has to all DML statement happen or none of them therefore there is rollback in each transaction. </p>
 </li>

<legend> </legend>
<P> <b>Entity</b> is the object which has several attributes or columns. Common entities are customer, user, client, product which each one is a table. <p>
<p> <b>Columns </b> or attributes holding only one value for each record. For ex. an address is not a column and it should be multiple columns like street name, pos city </p>
<P> <b> Tuples or Records </b>  is a complete collection of data. It means an entire row holding information about one thing. </P>
<p> <b> Primary Key </b> is a unique identifier for our entities. PK can not be null. Some call it artificial or sorted number which doesnt do anything except be a unique identifer. Everything that is not primary key we call it non-primary. </p> 
<p> <b>none-primary key </b> every column which is not primary key. </p>
<div class="alert alert-warning"> Parents dont know their children but children know them. </div>
<p> <b>Foreign Key </b> is a column on child table referencing unique identifier on parent table. </p>
<pre class="prettyprint lang-sql">
CREATE TABLE MENTOR1 (
  MEN_ID NUMBER(20),
  PRIMARY KEY (MEN_ID)
);
CREATE TABLE STU1 (
STU_ID NUMBER(20) PRIMARY KEY,
men number(20),
CONSTRAINT fk_men FOREIGN KEY (men) REFERENCES MENTOR1(MEN_ID)
);
</pre>
<h4> Constraint</h4>
<p> SQL constraints are used to specify rules for the data in a table and use for naming!

 If there is any violation between the constraint and the data action, the action is aborted by the constraint. from this <a href = "http://www.w3schools.com/sql/sql_constraints.asp"> refrence </a></p>

<p> <b> Cascade </b> This way foreign key keeps <b> data integrity </b>.  Dropping a table which is a parent of another table gives an error because the refrence would lose its source. To avoid we can delete first the parent then child or use cascade code</p>
<p> Below code command to drop all constraints refers to this table  then drop table (suggested)</p>
<pre class="prettyprint lang-sql">
drop table mentor1 CASCADE CONSTRAINTS;
</pre>
OR ADD this in table
<pre class="prettyprint lang-sql">
...
 CONSTRAINT fk_men FOREIGN KEY (men) REFERENCES MENTOR1(MEN_ID) ON DELETE CASCADE 
 ON UPDATE CASCADE  
...
</pre>

<p> <b> Self Refrential Relationship</b> for example  an entity  student whith attribue call tutor. Also each tutor is a student so it would be a foriegn key with student id refering to student table. </p>
<b> One to Many Relationship </b>

<p><b> Many to Many Relationship</b> We create a link table with a composite primary key of each table and make one to many relationship. Student can enroll in many courses and a class can have many students. If in student table we have a grade attribute and we want to find all the student grades in one class. This is a good <a href="http://stackoverflow.com/questions/7296846/how-to-implement-one-to-one-one-to-many-and-many-to-many-relationships-while-de"> link </a> </p>
</p>

<p><b> Composite Primary key </b>
<pre class="prettyprint lang-sql">
CREATE TABLE student_class 
(
    studentId INT REFERENCES student,
    classId INT REFERENCES class,
    PRIMARY KEY(studentId, classId)
);
</pre>

<h3 class="title"> Set out put SQL Developer</h3>
<p class="code">with below codes we can check the size and set it to customized version</p>
<pre class="prettyprint lang-sql">
show linesize;
show pagesize;
set pagesize  150;
set linesize 140; 
</pre>

<p> <b> Data Model </b> The process of defining and processing of information call data model. We need to identify what are the entities and attributes are and define the relationship among tables. It should be clear how the tables and attributes are and always ask question. </p>


<h3> Basic DML  </h3>
<p><b> Select </b> </p>
<p> <b> Insert</b> </p>
<pre class="prettyprint lang-sql">
Insert into students(
   student_id,
   name,
   grade,
 ) VALUES (
	1,
	'Amir',
	'C'
);
</pre>
<p><b> Update </b> </p>
<pre class="prettyprint lang-sql">
Update 
  students
SET
  grade = 'A+', name = 'Amir'
;
</pre>
<p> <b> Delete</b> </p>
<pre class="prettyprint lang-sql">
DELETE FROM students 
WHERE name = 'Amir'
</pre>
<div class=" alert alert-warning">
SQL is case insensitive only inside quotes it is.
</div>

<P> varchar should be always single quote. Only some cases we allow to use double quote which remove free space for us </P>
<p> put all syntax capital </p>

<h2> Select </h2>

<b> Renaming a column </b>
ID here is an alians for student_id 
</br>
<pre class="prettyprint lang-sql">
Select
  student_id AS ID
FROM students;
</pre>

<b> Recognize NULL </b>
find all names that are not NULL. So we dont have equal(=) to NULL!
</br>
<pre class="prettyprint lang-sql">
Select
  student_id AS ID, 
  name
FROM students
WHERE NOT name IS NULL;
--  NULL = NULL    is false
--  NULL <> NULL   is false
--  NULL != NULL   is false 
 
 However,
 NULL IS NULL   is true
</pre>

<b> Substitute NULL with a default value</b>
find all names that are  NULL and show "name is not accesible"
</br>
<pre class="prettyprint lang-sql">
Select
  student_id AS ID, 
  name
  nvl(name, 'name is not accesible'),
  nvl(student_id, 0),    -- when it is numeric
  nvl(to_char(student_id) AS ID 'student id is not available')  -- only after converting the replacement can be strings
 FROM students;
</pre>

<b> Order By </b>

</br>
<pre class="prettyprint lang-sql">
Select
  student_id AS ID, 
  name
 FROM students
 ORDER BY name;
</pre>

<b> Thin Air Dual </b>
<pre class="prettyprint lang-sql">
SELECT
  44 + 43
FROM dual;

SELECT 
  'youuuu', 
  1,  
  SYSDATE  
FROM dual;
</pre>

<b> DATES</b>

<p> Dates saved in date format. To see them as non numeric format we can define how to display as here we say firt month, then date then year.
But first we have to convert to char becuse they are in date type.</p>
<pre class="prettyprint lang-sql">
SELECT 
   name,
   to_char(bd,'Month, dd, yyyy') 
FROM  Students;
</pre>
<p>Inside the database, dates stored in one internal numeric format
(probably floating point).  It is not necessary to convert from one date
format to another because inside the database there is only one format. </p>
<p> Therefore anytime we stored data we use to_date() function, and any time reading date we use to_char().</p>
<p> To compare or filter dates it is better to convert them them to Date (they may have different format of yymmdd so by defining the format everything we keep integrity) rather than converting to char first then compare.
<pre class="prettyprint lang-sql">
SELECT 
   name,
   to_char(bd,'Month, dd, yyyy') AS Birthday
FROM  Students
WHERE bd >= TO_DATE('apr-11-2000','mon-dd-yyyy');
</pre>
This one is <b> incorrect: </b>
WHERE to_char(bd,'mon-dd-yyyy') >= 'apr-11-2000';
<br>
<p>
It compares one char letter with the same one. for examle if f > a so returns true. if our month is february! </p>
<pre class="prettyprint lang-sql">
Monday the Twenty-Three of August, Nineteen ninty-eight 
</pre>
To have a bove foramt we should use 
<pre class="prettyprint lang-sql">
Select 
   to_char(bd,'fmDay "the" fmDdspth "of" fmMonth, fmYear') 
FROM students;
</pre>
<b> Alias </b>
Defining a table with alias then it knows only alias as the table


<h3> Union </h3>
<p> combining rows(records) from one query  to another table. We have to select same number of columns from each row with the same data type and then combine them. Union remove duplicate but union all does not. </p>

<div class="alert alert-warning">
On the contrary join combine columns of two tables and rows while UNION combines only rwos on same columns </div>

<h3> Intersect</h3>
<p> It shows only the selected columns which are identical in both tables</p>
<div class="alert alert-warning"> Join can do the same as Intersect by joining two tables on columnss have in common
</div>

<h3> Minus </h3>
<p> It removes the selected item from the table </p> 

<h3> Aggregtion </h3>
<p>All aggregation functions (Count, Max, Min,..) ignores null and they only consider aggretaion clause or queries that exists. For example COUNT(company.name) consider only companies having name. </p>
<p> <b> Group BY </b> Finds the distinct groups of aggregation clauses. It comes after where and before order by. </p>
<p><b>Everytime </b> quering a column by aggregtion we need group function . Process start of <b> select </b> then <b> Group By </b> and then <b>Select</b></p>
<div class="alert alert-info">
SELECT SUM(pay) FROM customers;
returns: 1 8943
SELECT name, SUM(pay) FROM customers; 
-- It doesnt make sence because system can not figure out this sum is for all data or some people because name should supposely be dedicated to each row of sum here. So they define Group BY!
SELECT name, sum(pay) FROM customers Group By name;
</div>


























