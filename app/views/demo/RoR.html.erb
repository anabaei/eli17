
<style>  
h1,h2,h3
  {
  	font-family: 'Slabo 27px', serif;
  }
  p
  {
  	font-family: 'Lora', serif;
  }
  #contain
  {
   padding: 2%;
   border: solid 1px  gray; 
  }
</style>
<h2> Install and Run Ruby on Rails in Windows 7 <a href="/Install.pdf"> file </a></h2>
<h3> </h3>
<p>Learn how to configure a Ubuntu 14.04 server to deploy a Ruby on Rails 4 application. With nginx web server and postgresql database from <a href="http://www.rubytreesoftware.com/resources/ruby-on-rails-41-ubuntu-1404-server-configuration"> here </a> and <a href="http://www.rubytreesoftware.com/resources/ruby-on-rails-41-ubuntu-1404-server-configuration">
  here </a>
</p>

<p>
  Deploying rails on Ubuntu with Capistrano, Nginx and Puma via <a href="https://www.digitalocean.com/community/tutorials/deploying-a-rails-app-on-ubuntu-14-04-with-capistrano-nginx-and-puma"> this link </a>
</p>

<h3> a || = b</h3> 
<p>
unlike other lanuages, it doesnt mean a || a = b!. if a is false, nil or undefined then take b and set it to a, but if not stay with the same value.
</p>

<pre class="prettyprint lang-c">
 a=3
 a||=1  
 => a=3

 b= false or nil
 b||=1
 => b=1
</pre>

<h3> Params </h3>

<p> 
params equivalent to $_REQUEST, an HTTP Request variables, to convey variables  on different places. When a user request a page, params are set.  
</p>
<pre class="prettyprint lang-ruby">
 http://www.example.com/?foo=1 & boo = 12c
 params[:foo] = 1 , params[:boo] = 12c
</pre>
<p>
	It can be hash inside another hash, two dimention hash.
</p>
<pre class="prettyprint lang-ruby">
 http://www.example.com/?vote[:item] = 32
 params[:vote][:item] = 32
</pre>

<h3> Migration</h3>
<p> alter your db schema over time, at first schema starts with nothing and each migration add or even remove tables. </p>
<p> Each migration creates table with primary key called id, wich added implicitly. You can do all migration in rails with rake db:migrate
or one by one in db/migrate folder by rails g migrate name.</p>

<h3>Phusion Passenger</h3>
<p>
is a deployment setup for Rails. It automatically manages backend for apache and nginx. 
</p> 

<h3>Image tag </h3>
<p>
<pre class="prettyprint lang-ruby">
&lt%= image_tag("microsoft_logo.png", align: "right") %&gt which is equevalent of 
# &ltimg src="/assets/microsoft_icon.png" align="right"> </code>
</pre>		
</p>

<h3>Running application on localhost auxiliary server </h3>
<p>
  To run application at the same time on local and heroku server, instead of changing the database.yml configurations, we only need to add these two on gemfile 
</p>
<pre class="prettyprint lang-ruby">
group :development, :test do # <<<< :development, not devlopment
  gem 'sqlite3'
end

group :production do
  gem 'pg'
end
</pre>

<%= image_tag "assets/tech.png" %>
<img src=" <%= asset_path('tech.png') %>" >
<a href="https://www.youtube.com/watch?v=1XamBbdRIYw"> soap with RoR </a>
<a href="http://savonrb.com/version2/locals.html"> New changes to Savon 2 use this link </a>
<a href="https://www.youtube.com/watch?v=-xzqSFDdudA"> Authentication & Authorization </a>


<p>
instance variabales are transfered among controller and view. To contact with model, we have to call one method in a model class from controller. like @zip_code = ZipCode.initialize(params[:zip_code]), which is calling initialize method in model zipCode. and we define this method in model as def self.initialize(zip). 
  </p>

 <h3>Parameters </h3>
 <p>
You will probably want to access data sent in by the user or other parameters in your controller actions. There are two kinds of parameters possible in a web application. The first are parameters that are sent as part of the URL, called query string parameters.(with get) The <b>query string </b>is everything after “?” in the URL. The second type of parameter is usually referred to as <b>POST</b> data. This information usually comes from an HTML form which has been filled in by the user. It’s called POST data because it can only be sent as part of an HTTP POST request. Rails does not make any distinction between query string parameters and POST parameters, and both are available in the params hash in your controller:
Source From <a href="http://guides.rubyonrails.org/v2.3.11/action_controller_overview.html"> here </a>
</p>
<h3><center> make a simple <b>soap </b> cms app </center></h3>
 <div id="contain">
<p>
 first 28 minutes of <a href="https://www.youtube.com/watch?v=yhPDXM2Enew"> this </a> tutorial is a basic form which I summarize into 12 steps as below: </p> 
<p>1- rails g controller drivers index new </p>
<p>2- in rout: resources :drivrers</p>
<p>3- rails g model driver first_name:string last_name:string </p>
<p>4-  rake db:migrate   (to update database)</p>
<p>5- in driver controller: </p>
<pre class="prettyprint lang-ruby"> 
  def new
    @driver = Driver.new
  end
 </pre>
6- in new.html 
<pre class="prettyprint lang-ruby">
   &lt;% @driver = "D" %>
  &lt;%= form_for @driver  do |f| %>
    &lt;%= f&middot;label :first_name %> 
    &lt;%= f&middot;text_field :first_name %> 
     &lt;%= f&middot;submit %> 
  &lt;% end %>
 </pre>
 7- naming convenion knows what things go where 
 
<pre class="prettyprint lang-ruby">
   def create 
    render text: params&middot;inspect
   #@driver = Driver&middot;new()
    end
 </pre>
8- controller send us a specific hash name params it does two things:
  - let us access things via symbols rather than strings 
  - we have to call special methods to what rails get or send it is a security measure of rails 
<pre class="prettyprint lang-ruby">
 def create
  @driver = Driver.new (
   params&middot;require(:ourKey).permit(:eachValueOfKey)
  )
  @driver = Driver&middot;new (params.require(:driver).permit(:first_name))

  #now do somthing with our object, this is only for test
  render text: @driver.inspect

  if @driver.save
    render "drivers/new" #  redirect_to drivers_url  or redirect_to :controller => 'drivers', :action => 'index'
    else
    render 'new'
    end
 end
 </pre>
9- in rails c
<pre class="prettyprint lang-ruby">
 Driver.count
 Driver.last
</pre>

 10- controller
 <pre class="prettyprint lang-ruby">
 def index
    @drivers = Driver&middot;all
  end
 </pre>
  11- in index
<pre class="prettyprint lang-ruby">
&lt;% @drivers&middot;each do |driver| %>
  &lt;%= driver&middot;first_name %> 
&lt;% end %>
 </pre>
12 - call a model from controller (just to save what we are looking for in database)
<pre class="prettyprint lang-ruby">
    @zip_code = ZipCode&middot;initialize()

    and in ZipCode model we fetch the last item first_name from Driver model 

   def self.initialize(zipa) 
    return Driver.last.first_name
  end    
 </pre>
<h4> To pass instance variable from controller to view </h4>
<p>
  use render "controller/view" and dont use redirect_to 
</p>
 

<h3> Soap </h3>
<p>
 We use savon  gem and then bundle install.

  </p>
In create controller or other methods we dumped savon 
<pre class="prettyprint lang-ruby">
 client = Savon.client(wsdl: "http://www.webservicex.net/uszip.asmx?WSDL")
 response = client.call(:get_info_by_zip, message: { "USZip" => "90210" })
  @res = response
     if response.success?
       data = response.to_array(:get_info_by_zip_response, :get_info_by_zip_result, :new_data_set, :table).first
       if data
          @state = data[:state]
          @city = data[:city]
          @area_code = data[:area_code]
          @time_zone = data[:time_zone]       
        end
      end
 </pre>
 <p>Then in new.html.erb we add the instace variables to display </p>

  <pre class="prettyprint lang-ruby">
    &lt;%= @state %>
    &lt;%= @city %>
    &lt;%= @area_code %>
    &lt;%= @time_zone %>
  </pre>
<p> Also we can replace the create controller with below to get input from user and go search it as xml request from XML service.
  The soap request has borrowed from a <a href="http://www.soapui.org/"> soap UI </a> request. 
</p>
 <pre class="prettyprint lang-ruby">
def create
      @driver = Driver.new(params.require(:driver).permit(:first_name))
      if @driver.save
      #  @zip_code = ZipCode.initialize(params[:driver].to_s)
         @as = Driver.last.first_name
   # client = Savon.client(wsdl: "http://www.webservicex.net/uszip.asmx?WSDL")
 ############################# ############################# ############################# ######################################
 ################################  SETIGN UP SAVON CLIENT AND THEN MAKE A REQUEST TO INVOKE ####################################### 
 ############################# ############################# #############################  ##################################### 
     client = Savon.client(wsdl: "http://esb.dev.bcldb.com:25011/LDB_Retail/ProductService?WSDL") 

   ## BELOW I USE SOAP UI READY CODE TO MAKE A REQUEST ##
    rest = %q(
        &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prod="http://productservice.services.bcldb.com">
            &lt;soapenv:Header/>
               &lt;soapenv:Body>
                 &lt;prod:productBySKURequest>
                    &lt;prod:sku>)+@as.to_s+%q( &lt;/prod:sku>
                 &lt;/prod:productBySKURequest>
              &lt;/soapenv:Body>
            &lt;/soapenv:Envelope>
            )
    response = client.call(:get_product_by_sku, xml: rest)
    #  client = Savon.client(wsdl: "http://www.webservicex.net/airport.asmx?WSDL")
    # response = client.call(:get_airport_information_by_country, message: { "country" => @as })
    #  client = Savon.client(wsdl: "http://esb.dev.bcldb.com:25011/LDB_Retail/ProductService?WSDL") 
    # response = client.call(:get_product_by_sku, message: { "sku" => @as })

 #############################  ENDING HITING THE SOAP  SERVICE ####################################### 
 ############################## -##############################- ######################################## 
       @res = response.to_array
         if response.success?
           data = response.to_array(:product_by_sku_response, :product).first
     #########(only for zip code call) This part is to split response into parts that we want ###### ############################## ##############################
       # data = response.to_array(:get_info_by_zip_response, :get_info_by_zip_result, :new_data_set, :table).first # here we dig into nested hash response to zip code 
       # @data = response.to_array
        if data
       #    @state = data[:state]
       #    @city = data[:city]
       #    @area_code = data[:area_code]
       #    @time_zone = data[:time_zone]
            @name = data[:product_name]
         end
      ############################## ############################## ############################## ############################## 
      end
      render "drivers/new" # driver index 
      else
      render 'drivers/index'
      end
   end
</pre>
<p> Also we need and update method which would be the identical as craete </p>

</div>




