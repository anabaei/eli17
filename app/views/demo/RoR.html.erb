
<style>  
h1,h2,h3
  {
  	font-family: 'Slabo 27px', serif;
  }
  p
  {
  	font-family: 'Lora', serif;
  }
  #contain
  {
   padding: 2%;
   border: solid 1px  gray; 
  }
</style>
<h2> Install and Run Ruby on Rails in Windows 7 <a href="/Install.pdf"> file </a></h2>

<p>Learn how to configure a Ubuntu 14.04 server to deploy a Ruby on Rails 4 application. With nginx web server and postgresql database from <a href="http://www.rubytreesoftware.com/resources/ruby-on-rails-41-ubuntu-1404-server-configuration"> here </a> and <a href="http://www.rubytreesoftware.com/resources/ruby-on-rails-41-ubuntu-1404-server-configuration">
  here</a>. An updated Rails casts <a href="https://www.youtube.com/watch?v=FBxVN7U1Qsk"> tutorials </a></a>
</p>

<p>
  Deploying rails on Ubuntu with Capistrano, Nginx and Puma via <a href="https://www.digitalocean.com/community/tutorials/deploying-a-rails-app-on-ubuntu-14-04-with-capistrano-nginx-and-puma"> this link </a>
</p>
<p>
Ajax on Ruby on Rails <a hre="https://www.youtube.com/watch?v=FBxVN7U1Qsk"> tutorial </a>
</p>
<p> 
  Dont use underline in variable names
</p>

<h3> a || = b</h3> 
<p>
unlike other lanuages, it doesnt mean a || a = b!. if a is false, nil or undefined then take b and set it to a, but if not stay with the same value.
</p>

<pre class="prettyprint lang-c">
 a=3
 a||=1  
 => a=3

 b= false or nil
 b||=1
 => b=1
</pre>

<h3> Find_by <a href="http://apidock.com/rails/v4.0.2/ActiveRecord/FinderMethods/find_by"> text  </a></h3>

<h3> Params </h3>

<p> 
params equivalent to $_REQUEST, an HTTP Request variables, to convey variables  on different places. When a user request a page, params are set.  
</p>
<pre class="prettyprint lang-ruby">
 http://www.example.com/?foo=1 & boo = 12c
 params[:foo] = 1 , params[:boo] = 12c
</pre>
<p>
	It can be hash inside another hash, two dimention hash.
</p>
<pre class="prettyprint lang-ruby">
 http://www.example.com/?vote[:item] = 32
 params[:vote][:item] = 32
</pre>

<h3> Migration</h3>
<p> alter your db schema over time, at first schema starts with nothing and each migration add or even remove tables. </p>
<p> Each migration creates table with primary key called id, wich added implicitly. You can do all migration in rails with rake db:migrate
or one by one in db/migrate folder by rails g migrate name.</p>

<h3>Phusion Passenger</h3>
<p>
is a deployment setup for Rails. It automatically manages backend for apache and nginx. 
</p> 

<h3>Image tag </h3>
<p>
<pre class="prettyprint lang-ruby">
&lt%= image_tag("microsoft_logo.png", align: "right") %&gt which is equevalent of 
# &ltimg src="/assets/microsoft_icon.png" align="right"> </code>
</pre>		
</p>

<h3>Running application on localhost auxiliary server </h3>
<p>
  To run application at the same time on local and heroku server, instead of changing the database.yml configurations, we only need to add these two on gemfile 
</p>
<pre class="prettyprint lang-ruby">
group :development, :test do # <<<< :development, not devlopment
  gem 'sqlite3'
end

group :production do
  gem 'pg'
end
</pre>
<img src=" <%= asset_path('tech.png') %>" >
<a href="https://www.youtube.com/watch?v=1XamBbdRIYw"> soap with RoR </a>
<a href="http://savonrb.com/version2/locals.html"> New changes to Savon 2 use this link </a>
<a href="https://www.youtube.com/watch?v=-xzqSFDdudA"> Authentication & Authorization </a>


<p>
instance variabales are transfered among controller and view. To contact with model, we have to call one method in a model class from controller. like @zip_code = ZipCode.initialize(params[:zip_code]), which is calling initialize method in model zipCode. and we define this method in model as def self.initialize(zip). 
  </p>

 <h3>Parameters </h3>
 <p>
You will probably want to access data sent in by the user or other parameters in your controller actions. There are two kinds of parameters possible in a web application. The first are parameters that are sent as part of the URL, called query string parameters.(with get) The <b>query string </b>is everything after “?” in the URL. The second type of parameter is usually referred to as <b>POST</b> data. This information usually comes from an HTML form which has been filled in by the user. It’s called POST data because it can only be sent as part of an HTTP POST request. Rails does not make any distinction between query string parameters and POST parameters, and both are available in the params hash in your controller:
Source From <a href="http://guides.rubyonrails.org/v2.3.11/action_controller_overview.html"> here </a>
</p>
<h3> Rest vs Soap</h3>
<p>
 SOAP is designed for accessing remote objects, REST is not. REST supports passing media-types as simple as text/plain, which is far more primitive than dealing with an object.
  </p>
  <p>
    One major benefit of REST is that all you need to call and use it is a browser and a HTTP stack - pretty much every device and machine has that. So if ease of use and reach are you main goal - use REST.
 </p>
 <p>
One of the major benefits of SOAP is that you have a WSDL service description and you can pretty much discover the service automatically, and generate a useable client proxy from that service description (generate the service calls, the necessary data types for the methods and so forth).

So if discoverability and a strict, formal service description are more important to you, use SOAP (with the downside that you need a full-fledged SOAP client to call your service - your web browser won't be sufficient).
  </p>
<h3><center> make a simple <b>Soap </b> cms </center></h3>
 <div id="contain">
<p>
 first 28 minutes of <a href="https://www.youtube.com/watch?v=yhPDXM2Enew"> this </a> tutorial is a basic form which I summarize into 12 steps as below: </p> 
<p>1- rails g controller drivers index new </p>
<p>2- in rout: resources :drivrers</p>
<p>3- rails g model driver first_name:string last_name:string </p>
<p>4-  rake db:migrate   (to update database)</p>
<p>5- in driver controller: </p>
<pre class="prettyprint lang-ruby"> 
  def new
    @driver = Driver.new
  end
 </pre>
6- in new.html 
<pre class="prettyprint lang-ruby">
   &lt;% @driver = "D" %>
  &lt;%= form_for @driver  do |f| %>
    &lt;%= f&middot;label :first_name %> 
    &lt;%= f&middot;text_field :first_name %> 
     &lt;%= f&middot;submit %> 
  &lt;% end %>
 </pre>
 7- naming convenion knows what things go where 
 
<pre class="prettyprint lang-ruby">
   def create 
    render text: params&middot;inspect
   #@driver = Driver&middot;new()
    end
 </pre>
8- controller send us a specific hash name <b> Params </b>. It does two imortant things:
  <ul>
    <li> let us access things via symbols rather than strings </li>
    <li> we have to call special methods to what rails get or send. It is a security measure of rails </li> 
  </ul>
<pre class="prettyprint lang-ruby">
 def create
 # Parse new method in Model Driver, and send result into @driver instant 
 # @driver = Driver.new (params&middot;require(:ourKey).permit(:eachValueOfKey))
   @driver = Driver&middot;new (params.require(:driver).permit(:first_name))

  # Check What is inside our instant
  # render text: @driver.inspect

  if @driver.save
    render "drivers/new" #  redirect_to drivers_url  or redirect_to :controller => 'drivers', :action => 'index'
  else
    render 'new'
    end
 end
 </pre>
9- in rails c
<pre class="prettyprint lang-ruby">
 Driver.count
 Driver.last
</pre>

 10- controller
 <pre class="prettyprint lang-ruby">
 def index
    @drivers = Driver&middot;all
  end
 </pre>
  11- in index
<pre class="prettyprint lang-ruby">
&lt;% @drivers&middot;each do |driver| %>
  &lt;%= driver&middot;first_name %> 
&lt;% end %>
 </pre>
12 - Also we can call another model from controller to save into another table
<pre class="prettyprint lang-ruby">
    @zip_code = ZipCode&middot;initialize()
    and in ZipCode model we fetch the last item first_name from Driver model 
   def self.initialize(zipa) 
    return Driver.last.first_name
  end    
 </pre>
<h4> To pass instance variable from controller to view </h4>
<p>
  use render "controller/view" and dont use redirect_to 
</p>
<h3> Soap </h3>
<p>
 We use savon  gem and then bundle install. This <a href="http://railscasts.com/episodes/290-soap-with-savon?view=comments">tutorial </a>helps except some parts which needs to be updated.
  </p>
In create controller or other methods we dumped savon 
<pre class="prettyprint lang-ruby">
 client = Savon.client(wsdl: "http://www.webservicex.net/uszip.asmx?WSDL")
 response = client.call(:get_info_by_zip, message: { "USZip" => "90210" })
  @res = response
     if response.success?
       data = response.to_array(:get_info_by_zip_response, :get_info_by_zip_result, :new_data_set, :table).first
       if data
          @state = data[:state]
          @city = data[:city]
          @area_code = data[:area_code]
          @time_zone = data[:time_zone]       
        end
      end
 </pre>
 <p>Then in new.html.erb we add the instace variables to display </p>
  <pre class="prettyprint lang-ruby">
    &lt;%= @state %>
    &lt;%= @city %>
    &lt;%= @area_code %>
    &lt;%= @time_zone %>
  </pre>
<p> Also we can replace the create controller with below to get input from user and go search it as xml request from XML service.
  The soap request has borrowed from a <a href="http://www.soapui.org/"> soap UI </a> request. 
</p>
 <pre class="prettyprint lang-ruby">
def create
      @driver = Driver.new(params.require(:driver).permit(:first_name))
      if @driver.save
      #  @zip_code = ZipCode.initialize(params[:driver].to_s)
         @as = Driver.last.first_name
   # client = Savon.client(wsdl: "http://www.webservicex.net/uszip.asmx?WSDL")
 ############################# ############################# ############################# ######################################
 ################################  SETIGN UP SAVON CLIENT AND THEN MAKE A REQUEST TO INVOKE ####################################### 
 ############################# ############################# #############################  ##################################### 
     client = Savon.client(wsdl: "http://esb.dev.bcldb.com:25011/LDB_Retail/ProductService?WSDL") 
   ## BELOW I USE SOAP UI READY CODE TO MAKE A REQUEST ##
    rest = %q(
        &lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:prod="http://productservice.services.bcldb.com">
            &lt;soapenv:Header/>
               &lt;soapenv:Body>
                 &lt;prod:productBySKURequest>
                    &lt;prod:sku>)+@as.to_s+%q( &lt;/prod:sku>
                 &lt;/prod:productBySKURequest>
              &lt;/soapenv:Body>
            &lt;/soapenv:Envelope>
            )
    response = client.call(:get_product_by_sku, xml: rest)
    #  client = Savon.client(wsdl: "http://www.webservicex.net/airport.asmx?WSDL")
    # response = client.call(:get_airport_information_by_country, message: { "country" => @as })
    #  client = Savon.client(wsdl: "http://esb.dev.bcldb.com:25011/LDB_Retail/ProductService?WSDL") 
    # response = client.call(:get_product_by_sku, message: { "sku" => @as })

 #############################  ENDING HITING THE SOAP  SERVICE ####################################### 
 ############################## -##############################- ######################################## 
       @res = response.to_array
         if response.success?
           data = response.to_array(:product_by_sku_response, :product).first
     #########(only for zip code call) This part is to split response into parts that we want ###### ############################## ##############################
       # data = response.to_array(:get_info_by_zip_response, :get_info_by_zip_result, :new_data_set, :table).first # here we dig into nested hash response to zip code 
       # @data = response.to_array
        if data
       #    @state = data[:state]
       #    @city = data[:city]
       #    @area_code = data[:area_code]
       #    @time_zone = data[:time_zone]
            @name = data[:product_name]
         end
      ############################## ############################## ############################## ############################## 
      end
      render "drivers/new" # driver index 
      else
      render 'drivers/index'
      end
   end
</pre>
<p> Also we need and update method which would be the identical as craete </p>
</div>

<h2> <a href="http://triior.com/2014/10/13/slim-tutorial/"> SLIM </a> in Ruby on Rails</h2>

<p> After installing slim gems we would have below codes. Slim is extremly sensitive to indentations! </p>
 <pre class="prettyprint lang-slim">
  
= form_for Product.new do |f|
  .field
    == f.label :sku
    == f.text_field :sku
  .actions
    == f.submit

- @products.each do |a|
    p = a.sku
</pre>

<h3> Parse a specific method from view </h3>
<p> 
we use here form_tag and define a path and method and specific params to that. We could use form_for then it would call create action, not a customized action.
</p>
<pre class="prettyprint lang-ruby">
&lt;%= form_tag(the_path,:method => "get", id: "search-form") do %>
           &lt;%= text_field_tag :search, params[:search], placeholder: "Search Items" %>       
      &lt;%= submit_tag "Search", :name => nil %>
  &lt;% end %>
  In rout we define:
  get 'the' => 'products#the'
  In products controller:
  def the
    #@products = Product.all
    if params[:search]
     render products_test_path
    else
    end
  end
</pre>

<h2> redirect to specific URL extension </h2>
  <p>
    By adding any thing inside prantezes after path, it goes to that URL. Example, redirect_to users_path(21)
    goes to /users/index.com/21
  </p>
<h3> Adding id to a submit button in form_tag</h3>
<p>
Either   id: "submit_id" or :id => "submit_id"
</p>

<h2> RoR Ajax and jQuery </h2>
useful command to check what is inside params or insatnce variables
<pre class="prettyprint lang-ruby">
render :text =>params.inspect
 </pre>

<p>
  First we define a form to call a method  by submiting the button as below.
   Also we deine a path in route for that call:  
</p>
<pre class="prettyprint lang-ruby">
 &lt;%= form_tag(products_ajaxcall_path, id: "searchajax", remote: true )do %&gt;
 &lt;%= text_field_tag :search, params[:search], placeholder: "name" %&gt;  
 &lt;%= submit_tag "Find me", class: "btn btn-info" ,:name =&gt; nil , id: "submi"%&gt;
routes.rb
post 'products/ajaxcall' =&gt; 'products#ajaxcall'
</pre>
<p>
  In controller we define that method wchich will render the template we dedine there also two instans variables are passed through </p>
  <pre class="prettyprint lang-ruby">
   def ajaxcall
    if params[:search]
       @search = params[:search]
       # do stuff with @search and put resutls into @re
       @re =  response.to_array(:base_products_by_name_response)
       @zz = "QWQW" # till here is enough for not Ajax
      respond_to do |format|
       format.js { render  :action => 'ajaxcall.js.erb', lcoals: { re: @re , amir: @zz} }
      end
         else        
    end
  end
</pre>
<p> And inside my ajaxcall.js.erb file:</p>
 <pre class="prettyprint lang-ruby">
$('#one').html("&lt;h1&gt;My Name  &lt;%= j render :text =>@zz.to_s %&gt; "); 
$('#two').html("&lt;%=  render :text =&gt; &#64;re.inspect %&gt;");
OR
$('#two').html("&lt;%=  render :text =&gt; params.inspect %&gt;");
</pre>

<p> To have a simple form which pass params to a controller we only need to remove remote:true from form then 
  instead of rendering a js, render a page thats all </p>

  <h2> Define and passing a params  </h2>
<pre class="prettyprint lang-ruby">
  &lt;%&#61; form_tag(products_find_path, id: &#34;sear&#34; )do %&gt;  remote: true
           &lt;%&#61; text_field_tag :nameOfparams, params[:nameOfparams] %&gt;
           &lt;%&#61; submit_tag "Find" %&gt;
  &lt;% end %&gt;
  </pre>
  Then inside controller just say
  <pre class="prettyprint lang-ruby">
    def find 
      @var = params[:nameOfparams]
      # do stufff
      render "products/index" 
    end
  </pre>

  <p> To set a params from view as a an input hidden we have </p>
   <pre class="prettyprint lang-ruby">
      &lt;%= hidden_field_tag(:subaction, "anything") %&gt;
    </pre>
    <p> Which set up params[:subaction] with anything. It produce this html </p>
    <pre class="prettyprint lang-html">
        &lt;input type="hidden" name="subaction" id="subaction" value="2"&gt;
    </pre>

  <h2> Save into model attributes  </h2>
<p>
  From form_tag we can dedicate any params to input info, in controller it is necessary to pass params into a hashes with the exact same name of attributes in controller.  
</p>
<p>
  The only reason below we pass params into a hash is because our model(service) attribute is service8. This is a good <a href="http://patshaughnessy.net/2014/6/16/a-rule-of-thumb-for-strong-parameters">hint</a> 
  </p>

<pre class="prettyprint lang-ruby">
 def saveservice
      hash = {} 
      hash[:service8] = params[:ss]  
      @d = Service.new(hash)
      flash[:notice] = "it saved!"
      redirect_to root_url 
    else
    end
  end
  </pre>

  <h3> link_to and button tag </h3>
  <p>
When j is an object of variable which is in .each for |j| loop here, to specify that user only.
  </p>
  <pre class="prettyprint lang-ruby">
  &lt;%= link_to 'Delete', product_path(j), method: :delete, data: { confirm: 'Are you sure?' } %&gt;
    OR
   &lt;%= link_to "My List!", action: "show", class: 'btn btn-danger' , id: "mylist" %&gt; 

   &lt;%= button_tag "PRINT", "anyaction", onclick: "printpage()", class: "btn btn-default", id: "print" %&gt; 
  </pre>


<h2> Authentication </h2>
<p>
1- rails g congtroller users new
</p>
<p>
2- in routes. erb add 
 resources :users
</p>
<p>
3- create a link 
  <pre class="prettyprint lang-ruby">
  &lt;%= link_to 'register', new_user_path %&gt;
  </pre>
  </p>
<p>
4- create a model 
rails g model user email:string password_digest: string
</p>
<p>
5-   rake db:migrate
</p>
<p>
6- in controller
  def new 
    @user = User.new
    end
</p>
<p>
    7- create a register page 
    <pre class="prettyprint lang-ruby">
      &lt;%= form_for @user do |f| %&gt;
  &lt;br&gt;
    &lt;%= f.text_field :email %&gt;
    &lt;%= f.password_field :password %&gt;
    &lt;%= f.submit %&gt;
  
  &lt;% end %&gt;
  </pre>
  </p>
<p>
  8- inside user model add 
  has_secure_password 
  and add bcrypt ruby gem and bundle install
</p>
<p>
  9 - define creaet
   <pre class="prettyprint lang-ruby">
   def create 
     @user = User.new(user_params)
     
     if @user.save
        flash[:notice] = "you are new user!"
        redirect_to root_url
     else
       render 'new'
     end
  end

 private 

   def user_parans
      params.require(:user).permit( :email, :password)
   end
 </pre>
   10 - in index we show the existed users
    <pre class="prettyprint lang-ruby">
    &lt;% @users.each do |user| %&gt;
    &lt;%= user.email %&gt; 
    &lt;% end %&gt;
   </pre>
 </p>
 <p>
    11- add 
    @user = User.all to that index controller
  </p>
 <p>

   <h3> creating login </h3> 
   </p>
 <p>
    14- we need a session controller
    rails g controller session new 
   </p>
 <p>
   15- in routes.rb
    <pre class="prettyprint lang-ruby">
    resources :sessions, only: [:create]
    get '/login', to: 'sessions#new'
    get '/logout', to: 'sessions#destroy'
  </pre>
</p>
 <p>
  16- in index view
   <pre class="prettyprint lang-ruby">
   &lt;%= link_to 'Sign me', login_path %&gt;
    </pre>
   17- create form_tag to call an specific action in login page
  <pre class="prettyprint lang-ruby">
  &lt;h1&gt; Login page   &lt;/h1&gt;  
  &lt;%= form_tag sessions_path do %&gt;
  &lt;%= text_field_tag 'email' %&gt;
  &lt;%= password_field_tag 'password' %&gt;
  &lt;%= submit_tag 'Log me!' %&gt;
  &lt;% end %&gt;
  </pre>
</p>
<p>
  18- in sessions controller
 <pre class="prettyprint lang-ruby">
  def create 
   user = User.find_by email: params[:email].downcase
      if user && user.authenticate(params[:password])
        session[:user_id] = user.id
        redirect_to root_url
      else  
      flash.now[:alert] = "Invalid "
      render 'new'
      end
  end
</pre>
</p>
<p>
19-  &lt;%= link_to 'Sign Out', logout_path %&gt;
</p>
<p>
20-  def destroy
  <pre class="prettyprint lang-ruby">
   session[:user_id] = nil
   flash[:notice] = "you are sign out now!"
   redirect_to root_url
  end
</pre>
</p>
<p>
21- in application controller
   <pre class="prettyprint lang-ruby">
   def current_user
     User.find_by id: session[:user_id] if session[:user_id]
   end
 </pre>
</p>
<p>
23-   in index view
 <pre class="prettyprint lang-ruby">
  &lt;% if current_user.present? %&gt;
        Welcome  &lt;%= current_user.email %&gt;
      # do something
 &lt;% else %&gt;
     # do something else

  &lt;% end %&gt;
  </pre>
</p>
  24- To also save everything with lower case letters on add this to user model, and also truncate all spaces (remove spaces in inputs)

<pre class="prettyprint lang-ruby">
  def email=(value)
    value = value.strip.downcase
    write_attribute :email, value
  end
  </pre>
  <h2> Athuorization </h2>

  make constrains for public not to access the page

  1- in  controller of destination page
 <pre class="prettyprint lang-ruby">
  before_action :user_logged_in!
 </pre>
2 - we want to define that method (user_loged_in!)in whole application so we go to application contrller
<pre class="prettyprint lang-ruby">
def user_logged_in!
 return if current_user.present?
 flash[:alert] = "please sign in"
 redirect_to login_url
end
</pre>
And end!



<h2> Create a Booking system </h2>
<ul>
    <li>rails g booking </li>
    <li> rails g controller welcomes index</li>
    <li>rails g model service ser1:string ser2:string ser3:string ser4:string </li>
    <li> rake db:migrate and fix the root
      <pre class="prettyprint lang-ruby"> 
         root 'welcome#index'
         get 'welcome/index'
         post 'welcome/saveit' =&gt; 'welcome#saveit'
         post 'welcome/change' =&gt; 'welcome#change'
     </pre>
    </li>
    <li>Inside index.html
      <pre class="prettyprint lang-ruby">  
      &lt;%= form_tag(welcome_saveit_path, id: "s" )do %> 
           &lt;%= text_field_tag :ser1, params[:ser1] %>
           &lt;%= text_field_tag :ser2, params[:ser2] %>
           &lt;%= text_field_tag :ser3, params[:ser3] %>
           &lt;%= text_field_tag :ser4, params[:ser4] %>
          &lt;%= submit_tag "save me" %>
      &lt;% end %>
     </pre></li>
    <li> In welcome controller 
       <pre class="prettyprint lang-ruby">
           def index
            @services= Service.all
          end

          def saveit
              hash = {}
              hash[:ser1] = params[:ser1]
              hash[:ser2] = params[:ser2]
              hash[:ser3] = params[:ser3]
              hash[:ser4] = params[:ser4]
              @s= Service.new(hash)
              @s.save
              redirect_to root_url 
          end
                 
          def change
            @temp = params[:change]
            redirect_to root_url 
          end

       </pre>
    </li>
    <li>In index to see the results

 <pre class="prettyprint lang-ruby">   
&lt;ul&gt;&lt;&#37; if @services.nil? &#37;&gt; &gt;
    &lt;li&gt;  &lt;&#37;= "empty" %&gt; &lt;/li&gt;
  &lt;#37; else %&gt;
    &lt;&#37; @services.each do |u| %&gt;
      &lt;li&gt;  &lt;%= u.ser1 %&gt; &lt;/li&gt;
     &lt;li&gt;  &lt;%= u.ser2 %&gt; &lt;/li&gt;
     &lt;li&gt;  &lt;%= u.ser3 %&gt; &lt;/li&gt;
     &lt;li&gt;  &lt;%= u.ser4 %&gt; &lt;/li&gt;
    &lt;&#37; end %&gt;
    &lt;/ul&gt;
    &lt;&#37; end %&gt;;

&lt;% if @services.nil? %&gt;
    &lt;%= "empty" %&gt; 
  &lt;% else %&gt;
    &lt;% @counter = 0 %&gt;
    &lt;% @services.each do |u| %&gt;    
   
   &lt;ul &lt;%= "id=#{@counter}" %&gt;  
      &lt;li>  &lt;%= u.ser1 %> &lt;/li&gt;
       &lt;%  if u.ser1.empty? %&gt; 

           &lt;%= form_tag(welcome_change_path, id: "s" )do %&gt;
           &lt;% text_field_tag :change, params[:change] %&gt;
           &lt;%= submit_tag "replace" %&gt;
         &lt;% end %&gt;

          &lt;%=  render text: u.id %&gt; 
      &lt;% else %&gt;
        &lt;li&gt;  
     
         &lt;li>&gt;  &lt;%=  "QQQQQQQ"+ u.ser1 %> &lt;/li&gt;

        &lt;/li>&gt;
            &lt;% end %&gt; 
         &lt;/ul&gt;
    &lt;% @counter +=1 %&gt;
    &lt;% end %&gt;  
     &lt;%= @counter %&gt; 
    &lt;% end %&gt;
  </pre>

     </li>
    
</ul>



<h3> Pass variable from JavaScript into Ruby </h3>

<pre class="prettyprint lang-html"> 
&lt;script&gt;
 cont = 8;
 &lt;&#37;  session[:swing] = &#35;{cont} &#37;&gt; 
&lt;/script&gt;
</pre>

<h3> pass varibale from Ruby into Html (Dynamic id)</h3>
<pre class="prettyprint lang-html"> 
&lt;&#37; &#64;counter = 1 &#37;&gt;
&lt;li &lt;&#37;= "id=&#35;{&#64;counter}" &#37;&gt; &lt;/li&gt;
</pre>

<h2> Reverse actions in Rails </h2>

For rake db:migrate we would have 
<pre class="prettyprint lang-ruby">
rake db:migrate:down VERSION=20100905201547
</pre>
and for generated controlelrs and models we have d 
<pre class="prettyprint lang-ruby">
rails d model service ser1:string 
</pre>

<h2> Set params </h2>

Inside a form to set a params we need only have
<pre class="prettyprint lang-ruby">
  hidden_field_tag(:subaction, 'update') 
</pre>
When click submit to set it we have 
<pre class="prettyprint lang-ruby">
f.button  :submit , name: "subaction",value: "update"
</pre>
We would have params[:subaction] = "update" in both scenarios