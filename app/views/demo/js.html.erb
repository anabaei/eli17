          
<style>  
h1,h2,h3
  {
  	font-family: 'Slabo 27px', serif;
  }
  p
  {
  	font-family: 'Lora', serif;
  }
</style>

<h2 id="title"> JavaScript </h2>

<h3> Objects</h3>
<p> Every thing in JS is object or can be </p>
<p> Arrays: are kind of objects. </p>
<pre class="prettyprint lang-javascript " >
var fla = [ "gl1", "gl2", "gl3"];
fla.push("gl4");
// add own property
fla.in = "gl";
//output
0:gl1
1:gl2
2:gl3
3:gl4
in:gl5
</pre>

<h3>Functions </h3>
<p> Functions are also object in JS. When we use constructors for a function. In reality we barely use function as below but it is interesting  </p>
<pre class="prettyprint lang-javascript " >
var add = new Function("x","y","return x + y");
add(3,4); // returns 7!
</pre>
<p> Functions are first class values in javascript when we can </p>
<ol>
<li> Assign a function to a variable </li>
<li> Store a function as a value into an array </li>
<li> Pass a function to a function  </li>
<pre class="prettyprint lang-javascript " >
function add(first, second, callback){
  console.log(first+second);
  callback();
}
function done(){
  console.log("done");
}
// call it, done can be any function
add(2,3,done);
</pre>

<h3> Closure </h3>
<p>A closure is a function defined inside another function (parent function), and has access to variables that are declared and defined in the parent function scope.The closure has access to variables in three scopes: </p>
<ol type="I">
<li>Variables declared in their own scope</li>
<li>Variables declared in a parent function scope</li>
<li>Variables declared in the global namespace</li>
</ol>


<li> Return a function from a function  </li>
</ol>
<p> Define an object (module) </p>
<pre class="prettyprint lang-javascript " >
var mymodul ={ 
name: "amir",
age: 99,
sayname: function()  {document.write(this.name);},
setname: function(new) {this.name = new;}
};
// to call it
mymodul.sayname();
mymodul.setname("jadid");
</pre>

<h2> jQuery </h2>

<p>
  Choose all elements with a class name = sidehdr and everytime click on any item with this class, then toggle it (either hide or show). Selector here is first child of that class with ul div.
</p>

<pre class="prettyprint lang-jquery " >
 
 $(".sidehdr").click(function(){
   $('ul:first-child', this).slideToggle("fast");
 });
</pre>




<p>
	Adjust width of screen and send the width to a function which select specific stylesheet or even can select different contents and renders to the page.
</p>

<pre class="prettyprint lang-jquery " >
  $(function()
     adjuststyle($(this).width());
     $(window).resize(function ()
         {
        adjuststyle($(this).width());
         });
  });
</pre>
adjuststyle function
<pre class="prettyprint lang-jquery " >
   function adjuststyle(x)
   {
   width = ParseInt(x);
    if (width <970)
	   {
	     $("#defaut-stylesheet").attr("href", "css/style_3.css");
	   }
	     else  if (width <1229)
	   {
	     $("#defaut-stylesheet").attr("href", "css/style_2.css");
	   }
   
   }
&ltlink id="defaut-stylesheet" rel="stylesheet" type="text/css" href="css/style_1.css" />
</pre>


<h3> Pop up boostrap</h3> 
 <pre class="prettyprint lang-javascript" >
         &lt!-- Modal -->
        &ltdiv class="modal fade" id="myModal" role="dialog">
        &ltdiv class="modal-dialog">
       &lt!-- Modal content-->
        &ltimg src="images/pcm_guidline_pop.png" alt="Smiley face" style="width:105%;height:40%;">
      &lt/div>
        &lt/div>
       &lt!--End of  Modal content-->
  </pre>
<p>
css attribute selectors: 
</p>
<pre class="prettyprint lang-javascript" >
$("p").css({"background-color": "yellow", "font-size": "200%"});
</pre>

<p> Find the specific row and column in a table and change the color by adding a style class 
like this <a hre="http://jsfiddle.net/ZZYD4/">example </a> and <a href="http://jsfiddle.net/simevidas/qJ3tP/1/"> this </a> for a tabale 
</p>
<pre class="prettyprint lang-javascript" >
$('#mytable tr:eq(0) td:eq(1)').addClass('red');
</pre>

<style>
*:hover
{
  text-decoration: none !important;
}
</style>

<h3> append in jquery and remove </h3>
<ul >
  <li class="yup">Milk</li>
  <li class="yup">Bread</li>
  <li class="yup">Chips</li>
  <li class="yup">Socks</li>
</ul>
  
  <script>
$( ".yup" ).hover(
  function() {
    $( this ).append( $( "<span> ***</span>" ) );
     $( this ).append( $( "<li> __ || __ </li>" ) );
   
  }, function() {
    $( this ).find( "li:last" ).remove();
     console.log("CC"+$(this));
  }
);
  </script>

<pre class="prettyprint lang-html" >
&ltul&gt
  &ltli&gtMilk&lt/li&gt
  &ltli&gtBread&lt/li&gt
  &ltli&gtChips&lt/li&gt
  &ltli&gtSocks&lt/li&gt
&lt/ul&gt
  
  &ltscript&gt
$( "li" ).hover(
  function() {
    $( this ).append( $( " &ltspan&gt *** &lt/span&gt" ) );
     $( this ).append( $( " &ltli&gt __ || __ &lt/li&gt" ) );
    console.log($(this));
  }, function() {
    $( this ).find( "li:last" ).remove();
  }
);
  &lt/script&gt
</pre>

<h3> Find which key is pressed & check the length </h3>
 <pre class="prettyprint lang-javascript" >
   $( "#idOfInputField" ).keyup(function(e) 
   {
    console.log(e.which)
    var value = $(this).val();
    if ( value.length > 4 && e.which != 8 ) 
         {
          $("#sth").click();
        }
   });
</pre>

 <h2> Make a Swing for a list   </h2>
 <ol type="1">
  <li >
  <p>
    First we have a list of items which we just dump all from database into page as below
     </p>
    <pre class="prettyprint lang-ruby" >
     &lt;h2>My List &lt;/h2&gt;
      &lt;&#37; if @pros.nil? &#37;&gt;
      &lt;&#37; else &#37;&gt;
      &lt;table class = "table" &gt;
       &lt;&#37; @counter = 0 &gt;
      &lt;&#37; @pros.each do |j| %&gt;
      &lt;tr &lt;&#37;= "id=#{@counter}" %&gt; &gt; 
        &lt;td>
        &lt;&#37;= j.sku &#37;&gt;
        &lt;td>
        &lt;td>
          &lt;&#37;= j.name &#37;&gt;
        &lt;td>
        &lt;td&gt;&lt;&#37;= link_to 'Delete', product_path(j),
              method: :delete,
              data: { confirm: 'Are you sure?' } &#37;&gt;&lt;td&gt;
      &lt;td&gt;&lt;&#37;= link_to 'Details', 'http://www.bcliquorstores.com/product/'+j.sku &#37;&gt;&lt;td&gt;
      &lt;tr&gt;
       &lt;&#37; @counter +=1 &#37;&gt;
       &lt;&#37; end &#37;&gt; 
      &lt;table&gt;
      &lt;&#37; end &#37;&gt; 
  &lt;div&gt;
</pre>
</li>
<li>
<p> 
Now we assign defaults to variables when the page load.
</p>
<pre class="prettyprint lang-javascript" >
 &#36;( document ).ready(function() {
 count_hiting_next &#61; 0
 start &#61; 0
 en = "&lt;%&#61; @counter %&gt;";
 total &#61; 0;
 i &#61; 0; 

 /////////// first hide all results ////////
  while (i&lt;en) 
  {
    &#36;("#"+i).css("display", "none");
    i +&#61;1;
  }
</pre>
</li>
<li>
<p>
Nowe we define next key to show the next block and hide the previous ones
</p>
<pre class="prettyprint lang-javascript" >
            $("#key").click(function() {
               tempo_counter = 0;             
              //// display only 3 icons and also go until you reaching end 
              while (tempo_counter  &lt; 7 &#38;&#38; total  &lt; en) 
                {
                  // count_hiting_next save how many times you pressed next and total check is it last one!
                  selector = count_hiting_next + total;
                $("#"+selector).css("display", "block");
                 total +=1;
                 tempo_counter +=1;
                }
                total -=1;
           // console.log(" &lt;%=session[:swing]%&gt;");
                 count_hiting_next +=1;
            /// hide everything from 3 previouse ones
              hidecounter = selector - 7;
              while (hidecounter &gt; -1)
              {
                 $("#"+hidecounter).css("display", "none"); 
                  hidecounter -=1;
              }
        });
 </pre>
 </li>
 <li>
 <p>
  Then we define the back bottom which hide current ones and display last 7
 </p>
<pre class="prettyprint lang-javascript" >
   
                $("#resetsession").click(function() {

              if (total &gt; 1 &#38;&#38; selector &gt; -1)
              {
                    tempo_counter = 0;
                    count_hiting_next -=1;
                    total -=7;
                    total_dis = total ;
                     while (tempo_counter  &lt; 7 &#38;&#38; total_dis &gt; -1 ) 
                      {
                        // count_hiting_next save how many times you pressed next and total check is it last one!
                        selector = count_hiting_next + total_dis;
                       
                      $("#"+selector).css("display", "block");
                      console.log(selector);
                       tempo_counter +=1;
                       total_dis -=1;
                      }
                      ///hide whatever next exist
                        total_dis +=1;
           // console.log(";&lt;%=session[:swing]%&gt;");
                 count_hiting_next -=1;
            /// hide everything from 3 previouse ones
              hid = selector +7;
              while (hid  &lt; en &#38;&#38; hid > selector)

              {

                 $("#"+hid).css("display", "none"); 
                  hid +=1;
              }

                }
        });
</pre>
</li>
</ol>
<h1> JavaScript </p>
<h3>Stak vs Queue </h3>
<p>
	stack is FILA and queue is FIFO
</p>
<pre class="prettyprint lang-c " >
stack= [];
stack.push(2);stack.push(4);
i = stack.pop(); 
results:  i = 4 and stack = [2]

queue = [];
queue.push(2);queue.push(6);
i = stack.pop(); 
results:  i = 2 and stack = [6]
</pre>
<P>
 An asynchronous call ,AJAX, completes after function has returned its value, so we can not return the ajax call result  before all funtions has been completed on the web page. (Ajax is always the last one be completed)
</p>

<p> 
  to find the content of an string inside another string using mystring.indexOf("a") !== -1.
</p>

<p> find an element and dump everything before that char, it finds the place of char then give a substring from 0 untill that char accured </p>
<pre class="prettyprint lang-javascript" >
var s = '/Controller/Action?id=11112&value=4444';
s = s.substring(0, s.indexOf('?'));
document.write(s);
output:
/Controller/Action
</pre>



<pre class="prettyprint lang-javascript" >
Change (overwrite) the text value of an HTML element:
$("selector").text("New text")
Change (append) the text value of an HTML element:
$("selector").append("additional text")
Clear the text value of an HTML element:
$("selector").empty()
Read the text of an HTML element:
$value = $("selector").text()
Read the attribute of an HTML element:
$value = $("selector").attr("attributeName")
Write the attribute value of an HTML element:
$("selector").attr("attributeName", "attributeValue")
Read the value of a form input element:
$value = $("selector").val()
Read the value of a form checkbox or radio button:
//true if checked, false if not
$trueOrFalse = $("selector").is(":checked")
Write a value to a form input element:
$("selector").val("New value")
Change (overwrite) the HTML value of an element (eg: add new child elements):
$("selector").html("&ltp>New html content&lt/p>")

</pre>


<h1> Angular </h1>

<p> a simple mirroring input function, you should add cdn first to your dom </p>



<pre class="prettyprint lang-javascript" >
&ltscript src= "http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js"></script>
//then add this into your body
&ltdiv ng-app="">
&ltinput type="text" ng-model="name" placeholder="Enter name here">
&lth1>Hello {{name}}</h1>
&lt/div>
</pre>

<h2> Ajax </h2>
<pre class="prettyprint lang-javascript" >
 function me(sku)
           {
              $.post("http://www.bcliquorstores.com/product/"+sku,  
                        {
                          send_one_variable: getElementById("example").value,      
                        }
                       function(data)
                        {   
                        arr1 = data.split(",");
                        console.log("here is resultss: "+arr1[0]);
                        }
                  ); 
         }
</pre>

jQuery Callback Functions
JavaScript statements are executed line by line. However, with effects, the next line of code can be run even though the effect is not finished. This can create errors.

To prevent this, you can create a callback function.

A callback function is executed after the current effect is finished.

Typical syntax: $(selector).hide(speed,callback);

   
    
    
    