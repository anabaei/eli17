

<h2>VIM </h2>


<p> you can move cursor on any word then press * to find all </p>
<p> type ? or / then the word you want to search, 3/amir will search for the third occurance of amir in text </p>
<p> search with decimal or hex, searching with /\%d65 or with /\%x41 both find 'A' (character decimal 65 = hex 41),</p>
<p>  
vim ~/.vimrc
To use the desert colorscheme just add these lines to your vimrc file:
colo desert
syntax on
</p>
<p>
renaming a file is : mv firsname secondname
</p>
<p>
Runing an .exe file: ./amir.exe .Create a file : touch newfile. Creat directory: mk newfolder.
</p>

<P> Mounting a filesystem means make it accessible in specific subfiles or directory </P>
<p> Chmod means change the accessiblily or lock/unock a file  </p>
<p> to access a pachakge we use ls -qf /etc/pack returns all /etc/pacj </p>
<h3> ls</h3>
<p> ls -a -h -l or ls -ahl will list all human readable by long format</p>
<img src=" <%= asset_path('file_persmission.png') %>">

<p> Read: can read not modify, write: can change the file but not read, x: execute it </p>
<p>Two ways for change the mode permissions: Octal and Sybmbolic </p>

<p> Octal uses variouse state of different values 4,2,1 to show read, write and execute  and the total would be the octal number for each group. </p>
<img src=" <%= asset_path('symbolic.png') %>">
<p>  There are three operators here, too. "+" adds whichever permissions you specify to what's already there. "-" removes from whatever's there, and "=" resets the permissions to only whatever value you specify. So for example, to set my user permissions to read, write, and execute, I would use chmod u+rwx. To set my group permissions to only read, I would use chmod g=r, and to remove read, write and execute from others, I would write chmod o-rwx. </p>
<img src=" <%= asset_path('octal.png') %>">
<p> When a file is create at first the permision is 664(-rw-rw-r--). </p>

<img src=" <%= asset_path('symbolic_octal.png') %>">
<h3>find  </h3>
<p> find (path) (type) (what) example: find . -name "Mus*"   would find in current directory names which start with Mus </p>
<h3> Chown </h3>
<p> To change the owner ship. sudo chown root test.sh or sudo chown amir test.sh</p>

<h3> Pipes </h3>
<img src=" <%= asset_path('pipes.png') %>">
<p> 
cat poems.txt | cat -n | tail -n 5
</p>
<h3> Wildcard</h3>
<p> ? means any char instead of this one. * means any char or strings.</p>
<p> man command gives the manual, A+control and E+control jump cursor to start and 
end line</p>
<p> mkdir -p new1/new2 would create inside a new1 foler a new2 foler </p>
<h3> Cat </h3>
<p> Cat filename.txt returns all content </p>
<p> Cat head -n 5 amir.txt  returns first 5 lines </p>
<p> Cat tail -n 30 amir.txt return last 30 lines </p>

<img src=" <%= asset_path('cat_pipe.png') %>">

<h3> Grep</h3>
<p> grep prints lines of text that match a pattern. like grep "the" amir.txt returns all the inside txt file</p>
<p> grep -n ""the" amir.txt returns texts included the word and their line numbers </p>
<p> grep -i ""the" amir.txt is case insensitive both(the and The!)</p>
<p> grep -v ""the" amir.txt omits lines we dont want to see</p>
<p> grep -E ""[EYJK]" amir.txt shows the lines include either of these chars</p>
<p> grep -E ""\w{6,}" amir.txt result:  all of the text strings longer than six characters are highlighted</p>


<h3> AWK and SED</h3>
<p> Whenever you invoke Awk, you must specific a program for it to execute. </p>
<p> awk is really helpful for extracting particular data, sed is helpful for changing data. The most basic command in sed, replaces one string with another.</p>
<p> sed s/orange/red/ amir.txt changes every occurance of orange with red</p>



<legend> <br> </legend>

<h3> </h3>
<p> 
 </p>


 <h3> BIOS </h3>
<p> when you power-up your system, the BIOS is the first program to run. Its job is to start the coolers, check power levels, run some quick tests that evaluate the health of the system's hardware and then load drivers and start the boot process for the operating system. BIOS communicate with hardware with in binary and send and recieve signals to different devices to figure out all are correct or not.
BIOS is a very smal software usually 16 MB and keeps its data with a CMOS battery evern if computer is off. When the battry is died then BIOS works with its deualt device settings. Basic Input Output System. Each BIOS like intel or AMD had different structure systems and the way devices communicate with each one are different, so the devices should compatible with BIOS. 
 </p>
<p>The fundamental purposes of the BIOS in modern PCs are to initialize and test the system hardware components, and to load a boot loader or an operating system from a mass memory device. </p>
<h3> OS </h3>
<p> 
OS is on top of BIOS. OS interact with some other hardwares and BIOS. Softwares comunicate with HD through OS and also OS can communicate directly with users. OS managing files, memory and control computer pripherals.
 </p>


<h3> Charectristic of OS  </h3>
<p> 
<b>Multithreading </b>
<p>we have collection of tasks but cpu can run one at a time, so it is respoonsible for schedular which knows what the task are and what the memory state and register states are to priorites them. To human mind and human interepretation it runs simultaneously because they are fast.
<b> Content Swithing </b>

Is a technique that a single set of code can be used by several processes at different stage at one time.
</p>
<p>From CPU perspective, is the ability of a CPU to execute multiple processes or threads concurrently, appropriately supported by the operating system. This approach differs from <b>multiprocessing</b>, as with multithreading the  threads have to share the resources of cores like the computing units, the CPU caches, and the translation lookaside buffer (TLB).
 </p>

<p>
<b> Multitasking </b> running multi program at the same time 
 </p>
 <p> 
<b> Multiprocessing </b> One program can have one or two cpus, and different processes want to access cpu 
 </p>
<p>a process is an instance of a computer program that is being executed.  </p>


<h2> VERSION of UNIX</h2>
<p> Unix is an OS with different versions </p>
<li> Linux (generaly meaning of Linux refering to Ubunto)</li>
<li> Ubunto </li>
<li> Mac OSx</li>
<li> Redhat</li>
<li> Solaris and HP</li>


<h2> Unix Architecture </h2>

<p> Bios is on top of the hardwar and after that is Kernel which is the engine of Unix operating system.  Then is  Shell which is human interactive space. When we do commnad line, we deal with instance of a Shell which takes the command and send it to Kernel and Kernel tranlates it to machine code to Bias understand to run into computer processes.  </p>
<p> For example when we write a program it always call a new instance of a shell. We can tell to OS which version of shell should be used when  by adding shebang  #!/bin/bash </p>

<p>We usuall call <b> sh </b> but we really writing <b> bash </b> which is newer version of shell languages. Below is shell language ancestories </p>

<ol> 
<li> csh  written with C</li>
<li> sh  wtitten with Bourne </li>
<li> ksh  writen with Korn</li>
<li> bash  written with Bourne</li>
</ol>



<h2> Command Lines </h2>


<p> <b> PS </b> PS -f gives user ID, PID and PPID which is parent process ID that helps to find out what is problem in a shell scripting. Or use PS -af</p>


<p> <b> </b> </p> 
<p> <b> Absuloute Path</b> Specifies the path of current file or directory regardless of current location </p> 
<p> <b>Relative Path </b> Specifies the path of a file relative to currenct location </p> 
<pre class="prettyprint lang-unix">
  statistics
./statistics
../mail/statistics
</pre>

<script>
 $("h2").click(function(){
 	console.log("click! ");
   //$("pre").css("display","none");
 //  $("span",this).slideToggle("fast");
    $("p").next("p").slideToggle("fast");
   // document.getElementsByTagName("pre").slideToggle("fast");
 });
</script>







