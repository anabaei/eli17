<h1>Requirement Engineering </h1>

<h2> Case Study </h2>
<p> Based on an overview information we have to create main activities</p>
<ol type="I">
<li> Scope </li>
<p> will cover all goals and objectives, and the scope not covered are the one having issues but they are third party like overnight processing or the way trouble ticket issues or transport department   </p>
<li> Problem Statement </li>
<p> All manual actions consider as problems, any significant delay in processing like 3 months waiting for producing a letter, any middle ware steps whcih seems to be extra steps, Workload can not predicted, delay occurs because of lack of priority schedualing,  </p>
<li> Goals and Objectives </li>
<p> Find all verbs or clues shows unproductivity, manual, over cost or penalty, deadlines, delays and suggest a solution like Create new facillity to eliminate delay, addition function to capture info, automatic way to track,  train staff to cut out multiple wait or replace manual process with new  automatic systems to be more effienct, eliminate costs and penalties by ensuring meeting deadlines.   </p>
<li> Lists all events </li>
<p> All events start with a subject like, system update, system cancel, system create </p>
<li> wright business rules</li>
<li> Process Diagrams</li>
<p> Each process covers one or more events. In process diagram there are some external entities </p>
</ol>







After gathering requirements we start desgining. Interview with user make sure and identify areas have to be involved, who is responsible who is contaced! 

List event list so we have a list of things that have to be done. 

forces our details into diagrams. 

list of values potentially create a use case. 



<h2> Design part </h2>

<h3> Modelling Techniques </h3>


<p>  </p>

<h4> Use Case Model</h4>
<p> a big rectanglor, what are the main basic functionality this system has. Also there are actors using this system and show interaction with single line. </p>
<p> There are extended and included functionality are followed. </p>
<p>
Bussiness rules : All should stand alone
should stand alone 

Object attributes may use in use case,

card type --> there would be more extention for them --> 

Speed up the case models,

An Actor: it does not mean neccessary a person, it can be another system, 
</p>
<p>
System : system
use case: actuall process
</p>
<p>
Fill the order is a process, as a result for filling that order can result two different states for that order. once it is filled it created invoice notice that invoice is an entity, then printed invoice change the state to printed.
Entities can be Customer a part of stating known which is existing customer, (cancel order is a process and even an state), product which can have multiple states like available, not available, back order, on order. States are results of products (entities). 
</p>
<p>Validate them: for our processes we use as history to check
entity must have birth process and death process like invoice. somtitmes birth processes can come from some external process that talk with our system (SEP). </p>

<img src="<%= asset_path('casest.png') %>">

<p>dealing with key processes and the concepts dealing with that process are extends, like maintaining library books the extends would be checking out the books, adding new books</p>

<img src="<%= asset_path('usecase.png') %>">
<p>manager has more capability and inherit all features of sales person plus </p> 
<p>sell car or tires inheritate all features from selling products plus, it means selling cars or tires has all standard features of selling a product plus some extentions. For example selling cars has garantee, maintaince fee ,external charges  </p>
<p> sels person can sel products and here manager has more capability </p>

<img src="<%= asset_path('activity.png') %> ">
<h3> Activity Diagrams</h3>

<p> Tells how the processes actually work. In front of all event list should be an state, it means each event work as a transition from one state to another state. Or create a matrix of all events in first row and all state on firt culomn, then below each event write the behaviuor which conclude to a state</p>

<p> we are starting with black dot but not limited to only one because in real software we dont have only one entry point same as exit </p>

<p> swim reads are dotted lines to help user understand</p>
<p> syncronization line is black bold line that process can devide and contaticate each other to enter to new process </p>

<p>Diamond are used to if condition checking and in this case is used as to join two arrows to have better view as well </p>

<p> Problem here receive payment should be above the fill order because after 
	payment shipping should start, so create a tribgle above fill order from receive payment to  correct it </p>


<img src=" <%= asset_path('state.png') %>">
<h2> State Charts</h2>

<p> explain the stats or entities, it is similar to activity diagram </p>

<p> transitions are processes, it means they are the bobbles which serve us from one state to another state. It starts when the start change from a process</p>

<p> we took the first order which is consider an action , and order consider a state of checkd , not all checked is a condition for the process to item tell us have all are checked? to transaction we have different scenarios. all item checkecd?  if not so the state of order becomes waiting. also we can cancel.
all items are checked it goes to dispatched ready to ship and next state is delivered. so an order can have five different stetes and times. It can be cancel in three diferent states. It helps to identify what data goes from where to.   </p>


<h2> Class or Attribute </h2>
<p> It depends on the context.  </p>

<h2>Entity </h2>
<p> Entity describes a state during the process. Between two process there is entity to store data. </p>

<p>Entities(data tables) in below image:issue, title, publisher, grade(condition). Each entity has attributes like numbers, type etc... Then ask the relation, one grade can apply to many issue? or one issue has one grade only? </p>
<p> Attributes: volume, issue date, purchase price, current value</p>
<p> If two entities have many to many relation, then we have to 
create a middle ware entity with one to many relation among them. </p>
<p> Verify Entity model based on reports. look at the report
and say for exp can i get the address  informaiton when I have a name of customer? In this way we should be able to write 
the report.
</p>





































